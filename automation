Let's Start
intro aws cli
setup aws cli
aws cli commands pattern
credentials and configuration
using aws cli

Installation on windows

https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-windows.html

Installing on linux

ubuntu
refurl: https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-linux.html

==============aws configure=================================
create a user and give aws console access and take security crendeials
root@ip-172-31-10-135:~# aws configure
AWS Access Key ID [None]: AKIAQ5WQEB789SLU2BZ4HV
AWS Secret Access Key [None]: 78jbdjfbd8jbdfjbfkd8knd
Default region name [None]: ap-south-1
Default output format [None]: 

after permission add a inline policy
chooose json:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": [
                "ec2:DescribeInstances"
            ],
            "Resource": "*"
        }
    ]
}

aws ec2 describe-instances --region ap-south-1

aws ec2 describe-instances --region ap-south-1 --output table

aws ec2 describe-instances --region ap-south-1 --output text

=============aws cli ec2===============================
keypair
security group
ami
vpc & subnet
elastic ip

keypair
aws ec2 help
aws ec2 create-key-pair help
create a keypair

aws ec2 create-key-pair --key-name MyKeyPair

to genarate a pem file
aws ec2 create-key-pair --key-name MyKeyPair --output text > MyKeyPair.pem

                               security group

EXAMPLES
       To create a security group for EC2-Classic

       This example creates a security group named MySecurityGroup.

       Command:

          aws ec2 create-security-group --group-name MySecurityGroup --description "My security group"

       Output:

          {
              "GroupId": "sg-903004f8"
          }

       To create a security group for EC2-VPC

       This example creates a security group  named  MySecurityGroup  for  the
       specified VPC.

       Command:

          aws ec2 create-security-group --group-name MySecurityGroup --description "My security group" --vpc-id vpc-1a2b3c4d

       Output:

          {
              "GroupId": "sg-903004f8"
          }

       For more information, see Using Security Groups in the AWS Command Line
       Interface User Guide.

** to list the security groups
aws ec2 describe-security-groups help

EXAMPLES
       Example 1: To describe a security group

       The  following describe-security-groups example describes the specified
       security group.

          aws ec2 describe-security-groups \
              --group-ids sg-903004f8
---------------

deploy ec2 instance

aws ec2 run-instances help
              
EXAMPLES
       Example 1: To launch an instance into a default subnet

       The  following run-instances example launches a single instance of type
       t2.micro into the default subnet for the current Region and  associates
       it  with the default subnet for the default VPC for the Region. The key
       pair is optional if you do not plan to connect to your  instance  using
       SSH (Linux) or RDP (Windows).

          aws ec2 run-instances \
              --image-id ami-0abcdef1234567890 \
              --instance-type t2.micro \
              --key-name MyKeyPair


 Example  2:  To  launch an instance into a non-default subnet and add a
       public IP address

       The following run-instances example requests a public IP address for an
       instance  that  you're launching into a nondefault subnet. The instance
       is associated with the specified security group.

          aws ec2 run-instances \
              --image-id ami-0abcdef1234567890 \
              --instance-type t2.micro \
              --subnet-id subnet-08fc749671b2d077c \
              --security-group-ids sg-0b0384b66d7d692f9 \
              --associate-public-ip-address \
              --key-name MyKeyPair

       For an example of the output for run-instances, see Example 1.

       Example 3: To launch an instance with additional volumes

       The following run-instances example uses a block device mapping, speci-
       fied  in  mapping.json, to attach additional volumes at launch. A block
       device mapping can specify EBS volumes, instance store volumes, or both
       EBS volumes and instance store volumes.

          aws ec2 run-instances \
              --image-id ami-0abcdef1234567890 \
              --instance-type t2.micro \
              --subnet-id subnet-08fc749671b2d077c \
              --security-group-ids sg-0b0384b66d7d692f9 \
              --key-name MyKeyPair \
              --block-device-mappings file://mapping.json
              
        Example 4: To launch an instance and add tags on creation

       The following run-instances example adds a tag with a key of  webserver
       and value of production to the instance. The command also applies a tag
       with a key of cost-center and a value of cc123 to any EBS volume that's
       created (in this case, the root volume).

          aws ec2 run-instances \
              --image-id ami-0abcdef1234567890 \
              --instance-type t2.micro \
              --count 1 \
              --subnet-id subnet-08fc749671b2d077c \
              --key-name MyKeyPair \
              --security-group-ids sg-0b0384b66d7d692f9 \
              --tag-specifications 'ResourceType=instance,Tags=[{Key=webserver,Value=production}]' 'ResourceType=volume,Tags=[{Key=cost-center,Value=cc123}]'

       For an example of the output for run-instances, see Example 1.

Example 5: To launch an instance with user data

       The  following  run-instances example passes user data in a file called
       my_script.txt that contains a configuration script for  your  instance.
       The script runs at launch.

          aws ec2 run-instances \
              --image-id ami-0abcdef1234567890 \
              --instance-type t2.micro \
              --count 1 \
              --subnet-id subnet-08fc749671b2d077c \
              --key-name MyKeyPair \
              --security-group-ids sg-0b0384b66d7d692f9 \
              --user-data file://my_script.txt       

 Example 6: To launch a burstable performance instance

       The following run-instances example launches a t2.micro  instance  with
       the  unlimited  credit option. When you launch a T2 instance, if you do
       not specify --credit-specification, the default is the standard  credit
       option.  When  you  launch  a T3 instance, the default is the unlimited
       credit option.

          aws ec2 run-instances \
              --image-id ami-0abcdef1234567890 \
              --instance-type t2.micro \
              --count 1 \
              --subnet-id subnet-08fc749671b2d077c \
              --key-name MyKeyPair \
              --security-group-ids sg-0b0384b66d7d692f9 \
              --credit-specification CpuCredits=unlimited


********* elastic ip

aws ec2 allocate-address help

EXAMPLES
       Example 1: To allocate an Elastic IP address for EC2-Classic

       The following allocate-address example allocates an Elastic IP  address
       to use with an instance in EC2-Classic.

          aws ec2 allocate-address

       Output:

          {
              "PublicIp": "198.51.100.0",
              "PublicIpv4Pool": "amazon",
              "Domain": "standard"
          }

       Example 2: To allocate an Elastic IP address for EC2-VPC

       The  following allocate-address example allocates an Elastic IP address
       to use with an instance in a VPC.

          aws ec2 allocate-address \
              --domain vpc \
              --network-border-group us-west-2-lax-1

       Output:

          {
              "PublicIp": "70.224.234.241",
              "AllocationId": "eipalloc-02463d08ceEXAMPLE",
              "PublicIpv4Pool": "amazon",
              "NetworkBorderGroup": "us-west-2-lax-1",
              "Domain": "vpc"
          }

==========terminate ec2 instance
aws ec2 terminate-instances help

EXAMPLES
       To terminate an Amazon EC2 instance

       This example terminates the specified instance.

       Command:

          aws ec2 terminate-instances --instance-ids i-1234567890abcdef0

       Output:

          {
              "TerminatingInstances": [
                  {
                      "InstanceId": "i-1234567890abcdef0",
                      "CurrentState": {
                          "Code": 32,
                          "Name": "shutting-down"
                      },
                      "PreviousState": {
                          "Code": 16,
                          "Name": "running"
                      }
                  }
              ]
          }


===========================================s3======================s3===============s3===========================
s3

aws s3 help

aws s3 mb help
EXAMPLES
       The  following  mb command creates a bucket.  In this example, the user
       makes the bucket mybucket.  The bucket is created in the region  speci-
       fied in the user's configuration file:

          aws s3 mb s3://mybucket

       Output:

          make_bucket: s3://mybucket
 
**** upload the data



